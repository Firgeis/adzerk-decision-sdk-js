// tslint:disable
// eslint-disable
/**
 * Adzerk Decision API
 * Adzerk Decision API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import {
  Placement,
  PlacementFromJSON,
  PlacementFromJSONTyped,
  PlacementToJSON,
  RequestConsent,
  RequestConsentFromJSON,
  RequestConsentFromJSONTyped,
  RequestConsentToJSON,
  User,
  UserFromJSON,
  UserFromJSONTyped,
  UserToJSON
} from "./";

/**
 *
 * @export
 * @interface Request
 */
export interface Request {
  /**
   * One or more Placement objects
   * @type {Array<Placement>}
   * @memberof Request
   */
  placements: Array<Placement>;
  /**
   *
   * @type {User}
   * @memberof Request
   */
  user?: User;
  /**
   * Keywords for keyword Targeting. Such as `\"keywords\": [\"foo\", \"bar\", \"baz\"]`.
   * @type {Array<string>}
   * @memberof Request
   */
  keywords?: Array<string> | null;
  /**
   * The current page URL
   * @type {string}
   * @memberof Request
   */
  url?: string | null;
  /**
   * The referrer URL
   * @type {string}
   * @memberof Request
   */
  referrer?: string | null;
  /**
   * The IP address. Required for [Geo-Targeting](https://dev.adzerk.com/docs/geo-location)
   * @type {string}
   * @memberof Request
   */
  ip?: string | null;
  /**
   * Numeric creative ids to disregard for ad selection
   * @type {Array<number>}
   * @memberof Request
   */
  blockedCreatives?: Array<number> | null;
  /**
   * If true, only ads containing a single image will be returned
   * @type {boolean}
   * @memberof Request
   */
  isMobile?: boolean | null;
  /**
   * If true, return pricing data for the decision in the response
   * @type {boolean}
   * @memberof Request
   */
  includePricingData?: boolean | null;
  /**
   * If true, only return ads that are set to honor Do Not Track
   * @type {boolean}
   * @memberof Request
   */
  notrack?: boolean | null;
  /**
   * If making a client-side request, set to true. Defaults to false to ensure a server isn\'t seen as a bot. See [here](https://dev.adzerk.com/docs/tracking-overview#section-bot-filtering) for more info
   * @type {boolean}
   * @memberof Request
   */
  enableBotFiltering?: boolean | null;
  /**
   * If true, override the IP address of the request with the IP address supplied on the UserKey. If no IP address is found on the UserKey, this will fall back to the IP address on the request. Requires UserDB
   * @type {boolean}
   * @memberof Request
   */
  enableUserDBIP?: boolean | null;
  /**
   *
   * @type {RequestConsent}
   * @memberof Request
   */
  consent?: RequestConsent | null;
  /**
   * RTB requests only - sets an Identifier for Advertisers (IFA or IDFA)
   * @type {string}
   * @memberof Request
   */
  deviceID?: string | null;
}

export function RequestFromJSON(json: any): Request {
  return RequestFromJSONTyped(json, false);
}

export function RequestFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): Request {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    placements: (json["placements"] as Array<any>).map(PlacementFromJSON),
    user: !exists(json, "user") ? undefined : UserFromJSON(json["user"]),
    keywords: !exists(json, "keywords") ? undefined : json["keywords"],
    url: !exists(json, "url") ? undefined : json["url"],
    referrer: !exists(json, "referrer") ? undefined : json["referrer"],
    ip: !exists(json, "ip") ? undefined : json["ip"],
    blockedCreatives: !exists(json, "blockedCreatives")
      ? undefined
      : json["blockedCreatives"],
    isMobile: !exists(json, "isMobile") ? undefined : json["isMobile"],
    includePricingData: !exists(json, "includePricingData")
      ? undefined
      : json["includePricingData"],
    notrack: !exists(json, "notrack") ? undefined : json["notrack"],
    enableBotFiltering: !exists(json, "enableBotFiltering")
      ? undefined
      : json["enableBotFiltering"],
    enableUserDBIP: !exists(json, "enableUserDBIP")
      ? undefined
      : json["enableUserDBIP"],
    consent: !exists(json, "consent")
      ? undefined
      : RequestConsentFromJSON(json["consent"]),
    deviceID: !exists(json, "deviceID") ? undefined : json["deviceID"]
  };
}

export function RequestToJSON(value?: Request | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    placements: (value.placements as Array<any>).map(PlacementToJSON),
    user: UserToJSON(value.user),
    keywords: value.keywords,
    url: value.url,
    referrer: value.referrer,
    ip: value.ip,
    blockedCreatives: value.blockedCreatives,
    isMobile: value.isMobile,
    includePricingData: value.includePricingData,
    notrack: value.notrack,
    enableBotFiltering: value.enableBotFiltering,
    enableUserDBIP: value.enableUserDBIP,
    consent: RequestConsentToJSON(value.consent),
    deviceID: value.deviceID
  };
}
