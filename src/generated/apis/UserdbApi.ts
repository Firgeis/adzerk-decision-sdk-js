/* tslint:disable */
/* eslint-disable */
/**
 * Adzerk Decision API
 * Adzerk Decision API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import { GdprConsent, GdprConsentFromJSON, GdprConsentToJSON } from '../models';

export interface AddCustomPropertiesRequest {
  azk: string;
  networkId: number;
  body?: object;
}

export interface AddInterestsRequest {
  networkId: number;
  userKey: string;
  interest: string;
}

export interface AddRetargetingSegmentRequest {
  azk: string;
  networkId: number;
  advertiserId: number;
  retargetingSegmentId: number;
}

export interface ForgetRequest {
  networkId: number;
  userKey: string;
}

export interface GdprConsentRequest {
  networkId: number;
  gdprConsent?: GdprConsent;
}

export interface MatchUserRequest {
  azk: string;
  networkId: number;
  partnerId: number;
  userId: number;
}

export interface OptOutRequest {
  azk: string;
  networkId: number;
}

export interface ReadRequest {
  azk: string;
  networkId: number;
}

export interface SetUserCookieRequest {
  networkId: number;
  userKey: string;
}

/**
 * no description
 */
export class UserdbApi extends runtime.BaseAPI {
  /**
   * Add Custom Properties to a User
   */
  async addCustomPropertiesRaw(
    requestParameters: AddCustomPropertiesRequest
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.azk === null || requestParameters.azk === undefined) {
      throw new runtime.RequiredError(
        'azk',
        'Required parameter requestParameters.azk was null or undefined when calling addCustomProperties.'
      );
    }

    if (
      requestParameters.networkId === null ||
      requestParameters.networkId === undefined
    ) {
      throw new runtime.RequiredError(
        'networkId',
        'Required parameter requestParameters.networkId was null or undefined when calling addCustomProperties.'
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Adzerk-ApiKey'] = this.configuration.apiKey('X-Adzerk-ApiKey'); // ApiKeyAuth authentication
    }

    const response = await this.request({
      path: `/udb/{networkId}/custom`.replace(
        `{${'networkId'}}`,
        encodeURIComponent(String(requestParameters.networkId))
      ),
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: requestParameters.body as any,
    });

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Add Custom Properties to a User
   */
  async addCustomProperties(
    azk: string,
    networkId: number,
    body?: object
  ): Promise<void> {
    await this.addCustomPropertiesRaw({ azk: azk, networkId: networkId, body: body });
  }

  /**
   * Add Interests to a User
   */
  async addInterestsRaw(
    requestParameters: AddInterestsRequest
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.networkId === null ||
      requestParameters.networkId === undefined
    ) {
      throw new runtime.RequiredError(
        'networkId',
        'Required parameter requestParameters.networkId was null or undefined when calling addInterests.'
      );
    }

    if (requestParameters.userKey === null || requestParameters.userKey === undefined) {
      throw new runtime.RequiredError(
        'userKey',
        'Required parameter requestParameters.userKey was null or undefined when calling addInterests.'
      );
    }

    if (requestParameters.interest === null || requestParameters.interest === undefined) {
      throw new runtime.RequiredError(
        'interest',
        'Required parameter requestParameters.interest was null or undefined when calling addInterests.'
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    if (requestParameters.userKey !== undefined) {
      queryParameters['userKey'] = requestParameters.userKey;
    }

    if (requestParameters.interest !== undefined) {
      queryParameters['interest'] = requestParameters.interest;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/udb/{networkId}/interest/i.gif`.replace(
        `{${'networkId'}}`,
        encodeURIComponent(String(requestParameters.networkId))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Add Interests to a User
   */
  async addInterests(
    networkId: number,
    userKey: string,
    interest: string
  ): Promise<void> {
    await this.addInterestsRaw({
      networkId: networkId,
      userKey: userKey,
      interest: interest,
    });
  }

  /**
   * Add User to a Retargeting Segment
   */
  async addRetargetingSegmentRaw(
    requestParameters: AddRetargetingSegmentRequest
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.azk === null || requestParameters.azk === undefined) {
      throw new runtime.RequiredError(
        'azk',
        'Required parameter requestParameters.azk was null or undefined when calling addRetargetingSegment.'
      );
    }

    if (
      requestParameters.networkId === null ||
      requestParameters.networkId === undefined
    ) {
      throw new runtime.RequiredError(
        'networkId',
        'Required parameter requestParameters.networkId was null or undefined when calling addRetargetingSegment.'
      );
    }

    if (
      requestParameters.advertiserId === null ||
      requestParameters.advertiserId === undefined
    ) {
      throw new runtime.RequiredError(
        'advertiserId',
        'Required parameter requestParameters.advertiserId was null or undefined when calling addRetargetingSegment.'
      );
    }

    if (
      requestParameters.retargetingSegmentId === null ||
      requestParameters.retargetingSegmentId === undefined
    ) {
      throw new runtime.RequiredError(
        'retargetingSegmentId',
        'Required parameter requestParameters.retargetingSegmentId was null or undefined when calling addRetargetingSegment.'
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/udb/{networkId}/rt/{advertiserId}/{retargetingSegmentId}/i.gif`
        .replace(
          `{${'networkId'}}`,
          encodeURIComponent(String(requestParameters.networkId))
        )
        .replace(
          `{${'advertiserId'}}`,
          encodeURIComponent(String(requestParameters.advertiserId))
        )
        .replace(
          `{${'retargetingSegmentId'}}`,
          encodeURIComponent(String(requestParameters.retargetingSegmentId))
        ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Add User to a Retargeting Segment
   */
  async addRetargetingSegment(
    azk: string,
    networkId: number,
    advertiserId: number,
    retargetingSegmentId: number
  ): Promise<void> {
    await this.addRetargetingSegmentRaw({
      azk: azk,
      networkId: networkId,
      advertiserId: advertiserId,
      retargetingSegmentId: retargetingSegmentId,
    });
  }

  /**
   * Forget User
   */
  async forgetRaw(requestParameters: ForgetRequest): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.networkId === null ||
      requestParameters.networkId === undefined
    ) {
      throw new runtime.RequiredError(
        'networkId',
        'Required parameter requestParameters.networkId was null or undefined when calling forget.'
      );
    }

    if (requestParameters.userKey === null || requestParameters.userKey === undefined) {
      throw new runtime.RequiredError(
        'userKey',
        'Required parameter requestParameters.userKey was null or undefined when calling forget.'
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    if (requestParameters.userKey !== undefined) {
      queryParameters['userKey'] = requestParameters.userKey;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Adzerk-ApiKey'] = this.configuration.apiKey('X-Adzerk-ApiKey'); // ApiKeyAuth authentication
    }

    const response = await this.request({
      path: `/udb/{networkId}`.replace(
        `{${'networkId'}}`,
        encodeURIComponent(String(requestParameters.networkId))
      ),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Forget User
   */
  async forget(networkId: number, userKey: string): Promise<void> {
    await this.forgetRaw({ networkId: networkId, userKey: userKey });
  }

  /**
   * GDPR Consent
   */
  async gdprConsentRaw(
    requestParameters: GdprConsentRequest
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.networkId === null ||
      requestParameters.networkId === undefined
    ) {
      throw new runtime.RequiredError(
        'networkId',
        'Required parameter requestParameters.networkId was null or undefined when calling gdprConsent.'
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['X-Adzerk-ApiKey'] = this.configuration.apiKey('X-Adzerk-ApiKey'); // ApiKeyAuth authentication
    }

    const response = await this.request({
      path: `/udb/{networkId}/consent`.replace(
        `{${'networkId'}}`,
        encodeURIComponent(String(requestParameters.networkId))
      ),
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: GdprConsentToJSON(requestParameters.gdprConsent),
    });

    return new runtime.VoidApiResponse(response);
  }

  /**
   * GDPR Consent
   */
  async gdprConsent(networkId: number, gdprConsent?: GdprConsent): Promise<void> {
    await this.gdprConsentRaw({ networkId: networkId, gdprConsent: gdprConsent });
  }

  /**
   * User Matching
   */
  async matchUserRaw(
    requestParameters: MatchUserRequest
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.azk === null || requestParameters.azk === undefined) {
      throw new runtime.RequiredError(
        'azk',
        'Required parameter requestParameters.azk was null or undefined when calling matchUser.'
      );
    }

    if (
      requestParameters.networkId === null ||
      requestParameters.networkId === undefined
    ) {
      throw new runtime.RequiredError(
        'networkId',
        'Required parameter requestParameters.networkId was null or undefined when calling matchUser.'
      );
    }

    if (
      requestParameters.partnerId === null ||
      requestParameters.partnerId === undefined
    ) {
      throw new runtime.RequiredError(
        'partnerId',
        'Required parameter requestParameters.partnerId was null or undefined when calling matchUser.'
      );
    }

    if (requestParameters.userId === null || requestParameters.userId === undefined) {
      throw new runtime.RequiredError(
        'userId',
        'Required parameter requestParameters.userId was null or undefined when calling matchUser.'
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    if (requestParameters.partnerId !== undefined) {
      queryParameters['partnerId'] = requestParameters.partnerId;
    }

    if (requestParameters.userId !== undefined) {
      queryParameters['userId'] = requestParameters.userId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/udb/{networkId}/sync/i.gif`.replace(
        `{${'networkId'}}`,
        encodeURIComponent(String(requestParameters.networkId))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.VoidApiResponse(response);
  }

  /**
   * User Matching
   */
  async matchUser(
    azk: string,
    networkId: number,
    partnerId: number,
    userId: number
  ): Promise<void> {
    await this.matchUserRaw({
      azk: azk,
      networkId: networkId,
      partnerId: partnerId,
      userId: userId,
    });
  }

  /**
   * Opt-Out a User
   */
  async optOutRaw(requestParameters: OptOutRequest): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.azk === null || requestParameters.azk === undefined) {
      throw new runtime.RequiredError(
        'azk',
        'Required parameter requestParameters.azk was null or undefined when calling optOut.'
      );
    }

    if (
      requestParameters.networkId === null ||
      requestParameters.networkId === undefined
    ) {
      throw new runtime.RequiredError(
        'networkId',
        'Required parameter requestParameters.networkId was null or undefined when calling optOut.'
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/udb/{networkId}/optout/i.gif`.replace(
        `{${'networkId'}}`,
        encodeURIComponent(String(requestParameters.networkId))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Opt-Out a User
   */
  async optOut(azk: string, networkId: number): Promise<void> {
    await this.optOutRaw({ azk: azk, networkId: networkId });
  }

  /**
   * Read a User\'s UserDB Record
   */
  async readRaw(requestParameters: ReadRequest): Promise<runtime.ApiResponse<object>> {
    if (requestParameters.azk === null || requestParameters.azk === undefined) {
      throw new runtime.RequiredError(
        'azk',
        'Required parameter requestParameters.azk was null or undefined when calling read.'
      );
    }

    if (
      requestParameters.networkId === null ||
      requestParameters.networkId === undefined
    ) {
      throw new runtime.RequiredError(
        'networkId',
        'Required parameter requestParameters.networkId was null or undefined when calling read.'
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/udb/{networkId}/read`.replace(
        `{${'networkId'}}`,
        encodeURIComponent(String(requestParameters.networkId))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Read a User\'s UserDB Record
   */
  async read(azk: string, networkId: number): Promise<object> {
    const response = await this.readRaw({ azk: azk, networkId: networkId });
    return await response.value();
  }

  /**
   * Set User Cookie
   */
  async setUserCookieRaw(
    requestParameters: SetUserCookieRequest
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.networkId === null ||
      requestParameters.networkId === undefined
    ) {
      throw new runtime.RequiredError(
        'networkId',
        'Required parameter requestParameters.networkId was null or undefined when calling setUserCookie.'
      );
    }

    if (requestParameters.userKey === null || requestParameters.userKey === undefined) {
      throw new runtime.RequiredError(
        'userKey',
        'Required parameter requestParameters.userKey was null or undefined when calling setUserCookie.'
      );
    }

    const queryParameters: runtime.HTTPQuery = {};

    if (requestParameters.userKey !== undefined) {
      queryParameters['userKey'] = requestParameters.userKey;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request({
      path: `/udb/{networkId}/set/i.gif`.replace(
        `{${'networkId'}}`,
        encodeURIComponent(String(requestParameters.networkId))
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Set User Cookie
   */
  async setUserCookie(networkId: number, userKey: string): Promise<void> {
    await this.setUserCookieRaw({ networkId: networkId, userKey: userKey });
  }
}
